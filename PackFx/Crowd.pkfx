Version = 1.13.3.48349;
Generator = EDITOR;
CParticleEffect	$LOCAL$/Resource
{
	EditorInfosPosition = int2(73, 52);
	OnSpawn = "$LOCAL$/Spawner";
	LayerGroups = 
	{
		"$LOCAL$/Gaz",
		"$LOCAL$/Smoke",
		"$LOCAL$/Dog",
	};
	CustomAttributes = "$LOCAL$/_GlobalAttributes";
	SpatialLayers = "$LOCAL$/CParticleSpatialLayerList_A8E98A06";
}
CNEdEditorParticle_Data	$LOCAL$/EDITOR
{
	EditorInfosPosition = int2(413, -144);
	Position = float3(-1.2899927e+001, 1.5867531e+001, -3.6314294e+000);
	EulerOrientation = float3(-7.4137993e+001, -7.7923813e+001, 0.0000000e+000);
	PostFx_EnableDistortion = false;
	PostFx_EnableVignetting = false;
	BackdropToShapeSamplerMapping = 
	{
		"$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_7E88D3AD",
		"$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_E2EECECA",
		"$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_4E79EAD6",
		"$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_95BBB94F",
	};
	BackdropToVectorFieldSamplerMapping = 
	{
		"$LOCAL$/CNEdEditorParticle_BackdropToSamplerVectorField_482D43A7",
	};
	Backdrops = "$LOCAL$/_BackdropList";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Protest
{
	EditorInfosPosition = int2(-288, -61);
	Descriptor = "$LOCAL$/CParticleDescriptor_AE135B2A";
	SpawnCountMode = TotalParticleCount;
	FluxFactorExpression = "Protest_Count";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_AE135B2A
{
	EditorInfosPosition = int2(-392, -44);
	PrefferedStorageSize = Tiny;
	Renderer = "$LOCAL$/CParticleRenderer_List_1A58D602";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_5F1A0D53",
		"$LOCAL$/CParticleFieldDeclaration_8B35CC3B",
		"$LOCAL$/CParticleFieldDeclaration_CAE84747",
		"$LOCAL$/CParticleFieldDeclaration_EA7F0756",
		"$LOCAL$/CParticleFieldDeclaration_5AFEF50A",
		"$LOCAL$/CParticleFieldDeclaration_5868D395",
		"$LOCAL$/CParticleFieldDeclaration_58207F7C",
		"$LOCAL$/CParticleFieldDeclaration_194CF6B3",
		"$LOCAL$/CParticleFieldDeclaration_C37DB1F2",
		"$LOCAL$/CParticleFieldDeclaration_6341DFF6",
		"$LOCAL$/CParticleFieldDeclaration_75EF577C",
		"$LOCAL$/CParticleFieldDeclaration_3D1455F1",
		"$LOCAL$/CParticleFieldDeclaration_1B42C308",
		"$LOCAL$/CParticleFieldDeclaration_2B9155C6",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7";
	States = 
	{
		"$LOCAL$/CParticleState_3AF8190E",
	};
}
CActionFactoryWithChilds	$LOCAL$/Spawner
{
	EditorInfosPosition = int2(-162, -81);
	ChildList = 
	{
		"$LOCAL$/Protest",
		"$LOCAL$/CRS",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_9136D2F4
{
	EditorInfosPosition = int2(-508, -63);
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/BallDiffuse.png";
	BillboardMode = PlanarAlignedQuad;
	AxisField = "AxisSide";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_5566F5E7
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void	Eval()
{
	
	SLR = spawner.LifeRatio;							//// Valeur de 0 a 1 de tous les individus
	R = ninja;											//// Valeur random entre 0 et 1 pour chaque individu
	Mask = ninja;
	
	Life = infinity;									//// Durée de vie
	Size = rand(0.08,0.1)*2;							//// Taille pour chaque individu
	SizeRadar = Size * rand(2,8);						//// Taille de la zone de vue approximative
	Position = ProtestStartArea.samplePosition().x0z;	//// Position au spawn de chaque individu
	Mood = randsel(-1,1,Start_Angry_Protest);			//// Humeur de départ, pourcentage définie sur 1 par Start_Angry_Protest
	
	AxisUp = scene.axisUp();							
	AxisSide = scene.axisSide();

}
";
}
CParticleState	$LOCAL$/CParticleState_3AF8190E
{
	EditorInfosPosition = int2(-508, 65);
	Evolvers = 
	{
		"$LOCAL$/Script_3",
		"$LOCAL$/CParticleEvolver_Physics_36D6D4BD",
		"$LOCAL$/Script_1",
		"$LOCAL$/Evolver_1",
		"$LOCAL$/Evolver_2",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_36D6D4BD
{
	EditorInfosPosition = int2(-590, 86);
	CustomName = "Physics";
	Drag = 1.0000000e+000;
	WorldInteractionMode = OneWay;
	BouncesBeforeDeath = 0;
	BounceRestitution = 1.0000000e+000;
}
CParticleAttributeList	$LOCAL$/_GlobalAttributes
{
	EditorInfosPosition = int2(-599, -20);
	AttributeList = 
	{
		"$LOCAL$/CParticleAttributeDeclaration_54204416",
		"$LOCAL$/CParticleAttributeDeclaration_3F818A32",
		"$LOCAL$/CParticleAttributeDeclaration_0B434054",
		"$LOCAL$/CParticleAttributeDeclaration_C353FBA7",
		"$LOCAL$/CParticleAttributeDeclaration_46205408",
		"$LOCAL$/CParticleAttributeDeclaration_FA4BFF6B",
		"$LOCAL$/CParticleAttributeDeclaration_DB327BDE",
		"$LOCAL$/CParticleAttributeDeclaration_D410B8F9",
		"$LOCAL$/CParticleAttributeDeclaration_1AC88D0A",
		"$LOCAL$/CParticleAttributeDeclaration_D0CA7CD7",
		"$LOCAL$/CParticleAttributeDeclaration_D67E6FF7",
		"$LOCAL$/CParticleAttributeDeclaration_1BE0CDEF",
		"$LOCAL$/CParticleAttributeDeclaration_BA3CE0E6",
		"$LOCAL$/CParticleAttributeDeclaration_6270FEA1",
		"$LOCAL$/CParticleAttributeDeclaration_F92A76A9",
		"$LOCAL$/CParticleAttributeDeclaration_2274C82B",
		"$LOCAL$/CParticleAttributeDeclaration_D9034178",
		"$LOCAL$/CParticleAttributeDeclaration_341191B1",
		"$LOCAL$/CParticleAttributeDeclaration_BBE6C9C8",
		"$LOCAL$/CParticleAttributeDeclaration_4AC3D21D",
		"$LOCAL$/CParticleAttributeDeclaration_3AD22501",
		"$LOCAL$/CParticleAttributeDeclaration_8F481ABE",
		"$LOCAL$/CParticleAttributeDeclaration_FA555159",
		"$LOCAL$/CParticleAttributeDeclaration_CF442893",
		"$LOCAL$/CParticleAttributeDeclaration_2019FD22",
		"$LOCAL$/CParticleAttributeDeclaration_DB4F5DB7",
	};
	SamplerList = 
	{
		"$LOCAL$/CParticleSamplerShape_95A22C43",
		"$LOCAL$/CParticleSamplerShape_225FCA2B",
		"$LOCAL$/CParticleSamplerProceduralTurbulence_29856854",
		"$LOCAL$/CParticleSamplerShape_EC04F234",
		"$LOCAL$/CParticleSamplerShape_0C393D5C",
	};
}
CNEdEditorBackdrop_List	$LOCAL$/_BackdropList
{
	EditorInfosPosition = int2(125, -433);
	BackgroundLayers2D = 
	{
		"$LOCAL$/CNEdEditorBackdrop_Brush_9A913525",
	};
	SceneLayers3D = 
	{
		"$LOCAL$/_Backdrop_Light",
		"$LOCAL$/CNEdEditorBackdrop_Model3D_2AD82D87",
	};
	IsSceneLayers3DExpanded = true;
}
CNEdEditorBackdrop_Brush	$LOCAL$/CNEdEditorBackdrop_Brush_9A913525
{
	EditorInfosPosition = int2(-27, -485);
	IsVisible = false;
	LayerName = "Layer_Brush";
}
CNEdEditorBackdrop_Light	$LOCAL$/_Backdrop_Light
{
	LayerName = "GlobalLight";
	Position = float3(1.1233553e+002, 2.8270447e+002, 2.2297581e+002);
	EulerOrientation = float3(2.7000000e+002, 4.5000000e+001, 0.0000000e+000);
	LightFactory = "$LOCAL$/_Backdrop_Light_Factory";
	LightDistance = 3.7717276e+002;
}
CNEdEditorLightFactory	$LOCAL$/_Backdrop_Light_Factory
{
	NearClipPlane = 1.0000000e+002;
	LightSize = 9.9999998e-003;
	SpotFalloff = 8.8541701e-002;
	Magnitude = 1.0000000e+005;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5F1A0D53
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleEvolver_SpatialInsertion	$LOCAL$/Evolver_1
{
	CustomName = "SpatialInsertion";
	SpatialLayer = "$LOCAL$/CParticleSpatialDescriptor_01784E41";
}
CParticleSpatialLayerList	$LOCAL$/CParticleSpatialLayerList_A8E98A06
{
	LayerList = 
	{
		"$LOCAL$/CParticleSpatialDescriptor_01784E41",
		"$LOCAL$/CParticleSpatialDescriptor_50098991",
		"$LOCAL$/CParticleSpatialDescriptor_922EFBDD",
		"$LOCAL$/CParticleSpatialDescriptor_D3040F64",
		"$LOCAL$/CParticleSpatialDescriptor_30BE5779",
	};
}
CParticleSpatialDescriptor	$LOCAL$/CParticleSpatialDescriptor_01784E41
{
	LayerName = "SL_Protest";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_4CE1EDD1",
	};
}
CParticleEvolver_Script	$LOCAL$/Script_1
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_E10EF998";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_E10EF998
{
	Expression = "function void	Eval()
{
//// ACTION EXTERNE

	//// Detection du chien
	float3 dog = spatialLayers.SL_Dog.Position.closest(Position, SizeRadar);
	dog = select(0,safe_normalize(Position-dog),isfinite(dog));

	//// Detection du gaz
	float3 smokeGaz = spatialLayers.SL_Smoke.Position.closest(Position, SizeRadar*4);
	smokeGaz = select(0,safe_normalize(Position-smokeGaz),isfinite(smokeGaz)) * select(1,0.1,Mask_Protest_Percent>Mask);

//// POSITION

	//// Position initial du groupe dans le localspace
	float3 InitialPos = rotate(float3(pow(SLR,0.5),0,0),float3(0,1,0),R*pi*2)*2*(1-Protest_Grouping);
	//// Position cible de l\'ensemble du groupe
	float3 Target = ProtestTarget.samplePosition();
	//// Position réel cible
	float3 realTarget = Target + InitialPos - Position;
	
//// GESTION HUMEUR	

	float moodCRS = spatialLayers.SL_CRS.Mood.average(Position, SizeRadar*1.5);
	float moodProtest = spatialLayers.SL_Protest.Mood.average(Position, SizeRadar);
	//// Impact de l\'humeur par des evenement externe pour chaque individu
	float moodBetweenProtest = select(0,moodProtest*dt,isfinite(moodProtest))*(1-saturate(length(realTarget*2)));
	float moodWithCRS = 1.5*select(0,abs(moodCRS)*dt,isfinite(moodCRS));
	float smokeMood = select(0,dt*0.5* select(1,0.1,Mask_Protest_Percent>Mask),smokeGaz.x!=0);
	float dogMood = select(0,dt,dog.x!=0);
	float regainMoodByDistance = -dt*length(realTarget)*0.01;
	//// Ajustement de l\'humeur en relation avec les elements externes
	Mood += -Protest_Regain_Mood_Speed*dt + smokeMood + dogMood + moodBetweenProtest + moodWithCRS + regainMoodByDistance;
	Mood = clamp(Mood,-1,1);
	
//// GESTION DESERTION

	//// Accumulation de la tension au cours du temps si mauvaise humeur
	AccuAngry+= select(0,dt*Speed_Weak_Mass * select(1,10,isfinite(dog.x)),Mood==1 && isfinite(moodCRS) || Mood==1 && isfinite(dog.x));
	AccuAngry = select(saturate(AccuAngry),0,Mood==-1 && Recall_Deserter==1 || TimeDesert==1 && Charge_Protest==1);
	//// Desertion
	TimeDesert+= select(0,dt*Speed_Grow_Mass,AccuAngry==1);
	TimeDesert = select(saturate(TimeDesert),0,TimeDesert==1);
	//// Direction desertion, opposé à la position cible des CRS
	float3 desertDir = rotate(safe_normalize(ProtestTarget.samplePosition()-CRSTarget.samplePosition()),float3(0,1,0),noise(scene.Time+SLR*100)*pi*0.5)*select(0,1,AccuAngry==1);
	
//// ACTION CHARGE & CIRCLING

	//// Position global CRS
	float3 posCRS = CRSTarget.samplePosition();
	//// Detection CRS proche
	float3 nearCRS = spatialLayers.SL_CRS.Position.closest(Position, SizeRadar);
	nearCRS = select(posCRS,nearCRS,isfinite(nearCRS));
	//// Charge selon % Treshold_Mood_Action_Protest et si AccuAngry n\'est pas a 1 (en desertion)
	float3 charge = select(0,safe_normalize(posCRS+InitialPos-Position),Charge_Protest==1 && Mood>Treshold_Mood_Action_Protest && AccuAngry!=1);
	//// Circling selon % Treshold_Mood_Action_Protest et si AccuAngry n\'est pas a 1 (en desertion)
	float3 circling	= select(0,safe_normalize(nearCRS+InitialPos-Position),Circling_Protest==1 && Mood>Treshold_Mood_Action_Protest && AccuAngry!=1);

//// GESTION ENVIRONMENT

	////Raycast de l\'environment 3d a partir de chaque individu en direction du groupe opposé + ou - 90°
	float4 avoidWall = scene.intersect(Position- OffsetYpos.0x0, rotate(safe_normalize(Target + InitialPos - Position),float3(0,1,0),rand(-pi,pi)*0.5), 1);
	avoidWall = select(0, avoidWall , isfinite(avoidWall));
	
//// GESTION ENTRE INDIVIDU

	//// repulsion entre individu
	float3 push = spatialLayers.SL_Interact.Position.closest(Position, Size*1.5, 1);
	float3 PUSH = select(0,Position-push,isfinite(push))*8;
	//// magnétisme entre individu
	float3 link = spatialLayers.SL_Interact.Position.closest(Position, Size*2, 2);
	float3 LINK = - select(0,Position-link,isfinite(link) && length(Position-link)>0.2)*2;

//// MOUVEMENT GLOBAL

	//// Ajustement de la vitesse d\'angle lors des mouvements
	vecTarget += safe_normalize(realTarget)*dt*4;
	vecTarget = safe_normalize(vecTarget);
	//// Ajout d\'une turbulence
	float3 smallTurb = lerp(1,Turb_1.sample(Position*4),0.5);
	float3 pos = vecTarget * smallTurb * (1-0.5*saturate(length(realTarget*0.25)))*2 * saturate(0.25*length(ProtestTarget.samplePosition()-Position));
	//// Compilation de toutes les notions de mouvements
	float3 allMove = dog + smokeGaz + circling + charge + desertDir + PUSH + LINK + pos + avoidWall.xyz*avoidWall.w*8;
	VelocityField = lerp(allMove*saturate(length(realTarget)),allMove,Agitation);
	
//// GESTION COULEURS INFOS

	Color = lerp(lerp(float4(0,1,0,1),float4(1,0,0,1),Mood*0.5+0.5),float4(0,0,0,1),AccuAngry)*InfosVisibility;
	ColorRadar = Color*0.2;
	
//// CONTRAINTES POSITION & NORMALISATION VECTEUR DIRECTION

	Position = Position.x0z + OffsetYpos.0x0;
	Direction = safe_normalize(Position-prePos);

//// ACTIVATION DES MESH

	MeshId = ActivateVoxelCharacter;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_8B35CC3B
{
	FieldName = "VelocityField";
	FieldType = float3;
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_95A22C43
{
	SamplerName = "ProtestTarget";
	Shape = "$LOCAL$/CShapeDescriptor_D7894EC2";
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_D7894EC2
{
	Position = float3(-7.3438239e+000, 2.1934509e-005, 1.8433110e+000);
	BoxDimensions = float3(0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	Radius = 0.0000000e+000;
}
CNEdEditorParticle_BackdropToSamplerShape	$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_7E88D3AD
{
	SourceSamplerShape = "$LOCAL$/CParticleSamplerShape_95A22C43";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_CAE84747
{
	FieldName = "vecTarget";
	FieldType = float3;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_54204416
{
	AttributeName = "Protest_Grouping";
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleSpatialDescriptor	$LOCAL$/CParticleSpatialDescriptor_50098991
{
	LayerName = "SL_CRS";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_0CF0DB4B",
	};
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_40ED43C8
{
	Position = float3(-9.6123762e+000, 2.1409988e-004, 9.6572151e+000);
	BoxDimensions = float3(0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	Radius = 0.0000000e+000;
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_225FCA2B
{
	SamplerName = "CRSTarget";
	Shape = "$LOCAL$/CShapeDescriptor_40ED43C8";
}
CNEdEditorParticle_BackdropToSamplerShape	$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_E2EECECA
{
	SourceSamplerShape = "$LOCAL$/CParticleSamplerShape_225FCA2B";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_3F818A32
{
	AttributeName = "CRS_Grouping";
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleSpatialDescriptor	$LOCAL$/CParticleSpatialDescriptor_922EFBDD
{
	LayerName = "SL_Interact";
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_1A58D602
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Billboard_9136D2F4",
		"$LOCAL$/CParticleRenderer_Billboard_7BAEC76B",
		"$LOCAL$/CParticleRenderer_Mesh_4CD7E3DB",
	};
}
CNEdEditorBackdrop_Model3D	$LOCAL$/CNEdEditorBackdrop_Model3D_2AD82D87
{
	LayerName = "Model3D_1";
	Position = float3(-3.7915878e+000, -9.9999994e-002, -1.1847305e-001);
	ResourceModel = "Meshes/TestArea.FBX";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EA7F0756
{
	FieldName = "Mood";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_4CE1EDD1
{
	FieldName = "Mood";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_0CF0DB4B
{
	FieldName = "Mood";
}
CParticleSamplerProceduralTurbulence	$LOCAL$/CParticleSamplerProceduralTurbulence_29856854
{
	SamplerName = "Turb_1";
}
CNEdEditorParticle_BackdropToSamplerVectorField	$LOCAL$/CNEdEditorParticle_BackdropToSamplerVectorField_482D43A7
{
	SourceSamplerVectorField = "$LOCAL$/CParticleSamplerProceduralTurbulence_29856854";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_7BAEC76B
{
	DrawOrder = -1;
	CustomName = "Billboard";
	Diffuse = "Textures/Circle.png";
	BillboardMode = PlanarAlignedQuad;
	SizeField = "SizeRadar";
	ColorField = "ColorRadar";
	AxisField = "AxisSide";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5AFEF50A
{
	FieldName = "AxisUp";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5868D395
{
	FieldName = "AxisSide";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_58207F7C
{
	FieldName = "ColorRadar";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_194CF6B3
{
	FieldName = "R";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C37DB1F2
{
	FieldName = "SLR";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_0FEC68D1
{
	EditorInfosPosition = int2(-392, -44);
	PrefferedStorageSize = Tiny;
	Renderer = "$LOCAL$/CParticleRenderer_List_7180DF68";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_91A726CF",
		"$LOCAL$/CParticleFieldDeclaration_8A39563E",
		"$LOCAL$/CParticleFieldDeclaration_30B972D9",
		"$LOCAL$/CParticleFieldDeclaration_C8917CD2",
		"$LOCAL$/CParticleFieldDeclaration_E7034817",
		"$LOCAL$/CParticleFieldDeclaration_4F73ED26",
		"$LOCAL$/CParticleFieldDeclaration_1472DFE1",
		"$LOCAL$/CParticleFieldDeclaration_008E1BB8",
		"$LOCAL$/CParticleFieldDeclaration_0ED488DB",
		"$LOCAL$/CParticleFieldDeclaration_9B47DF63",
		"$LOCAL$/CParticleFieldDeclaration_EF197062",
		"$LOCAL$/CParticleFieldDeclaration_5D5EA3B6",
		"$LOCAL$/CParticleFieldDeclaration_212635FD",
		"$LOCAL$/CParticleFieldDeclaration_DFC74633",
		"$LOCAL$/CParticleFieldDeclaration_7CD67772",
		"$LOCAL$/CParticleFieldDeclaration_0FD5F18D",
	};
	CustomEvents = 
	{
		"$LOCAL$/CParticleEventDeclaration_89669620",
		"$LOCAL$/CParticleEventDeclaration_04FC78D4",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_8196DD85";
	States = 
	{
		"$LOCAL$/CParticleState_83B1582C",
	};
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_7180DF68
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Billboard_F587BE4B",
		"$LOCAL$/CParticleRenderer_Billboard_96F194DC",
		"$LOCAL$/CParticleRenderer_Mesh_9DDFBD10",
	};
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_F587BE4B
{
	EditorInfosPosition = int2(-508, -63);
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/BallDiffuse.png";
	BillboardMode = PlanarAlignedQuad;
	AxisField = "AxisSide";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_96F194DC
{
	DrawOrder = -1;
	CustomName = "Billboard";
	Diffuse = "Textures/Circle.png";
	BillboardMode = PlanarAlignedQuad;
	SizeField = "SizeRadar";
	ColorField = "ColorRadar";
	AxisField = "AxisSide";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_91A726CF
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_8A39563E
{
	FieldName = "VelocityField";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_30B972D9
{
	FieldName = "vecTarget";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_C8917CD2
{
	FieldName = "Mood";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E7034817
{
	FieldName = "AxisUp";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_4F73ED26
{
	FieldName = "AxisSide";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_1472DFE1
{
	FieldName = "ColorRadar";
	FieldType = float4;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_008E1BB8
{
	FieldName = "R";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_0ED488DB
{
	FieldName = "SLR";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_8196DD85
{
	EditorInfosPosition = int2(-508, 22);
	Expression = "function void	Eval()
{
	ID = spawner.EmittedCount;
	SLR = spawner.LifeRatio;
	R = ninja;
	Life = infinity;
	Size = rand(0.08,0.1)*2;
	Position = CRSStartArea.samplePosition().x0z;
	Mood = randsel(-1,1,Start_Angry_CRS);
	AxisUp = scene.axisUp();
	AxisSide = scene.axisSide();
	SizeRadar = Size * rand(2,8);
}
";
}
CParticleState	$LOCAL$/CParticleState_83B1582C
{
	EditorInfosPosition = int2(-508, 65);
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Script_9815EDB0",
		"$LOCAL$/CParticleEvolver_Physics_84C5845F",
		"$LOCAL$/CParticleEvolver_Script_92B13B0E",
		"$LOCAL$/CParticleEvolver_SpatialInsertion_78104860",
		"$LOCAL$/Evolver_3",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_84C5845F
{
	EditorInfosPosition = int2(-590, 86);
	CustomName = "Physics";
	Drag = 1.0000000e+000;
	WorldInteractionMode = OneWay;
	BouncesBeforeDeath = 0;
	BounceRestitution = 1.0000000e+000;
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_92B13B0E
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_C379CFE9";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_C379CFE9
{
	Expression = "function void	Eval()
{

	float3 InitialPos = rotate(float3(pow(SLR,0.5),0,0),float3(0,1,0),R*pi*2)*2*(1-CRS_Grouping);
	float3 Target = CRSTarget.samplePosition();
	float3 realTarget = Target + InitialPos - Position;

	float moodCRS= spatialLayers.SL_CRS.Mood.average(Position, SizeRadar);
	float moodProtest = spatialLayers.SL_Protest.Mood.average(Position, SizeRadar*1.5);
	Mood += -CRS_Regain_Mood_Speed*dt + select(0,moodCRS*dt,isfinite(moodCRS))*(1-saturate(length(realTarget*2))) + 1.5*select(0,abs(moodProtest)*dt,isfinite(moodProtest)) -dt*length(realTarget)*0.01;
	Mood = clamp(Mood,-1,1);
	
	float3 posProtest = ProtestTarget.samplePosition();
	float3 nearProtest = spatialLayers.SL_Protest.Position.closest(Position, SizeRadar);
	nearProtest = select(posProtest,nearProtest,isfinite(nearProtest));
	float3 charge = select(0,safe_normalize(posProtest+InitialPos-Position),Charge_CRS==1);
	float3 circling	= select(0,safe_normalize(nearProtest+InitialPos-Position),Circling_CRS==1);
	

	float4 avoidWall = scene.intersect(Position - OffsetYpos.0x0, rotate(safe_normalize(Target + InitialPos - Position),float3(0,1,0),rand(-pi,pi)*0.5), 1);
	avoidWall = select(0, avoidWall , isfinite(avoidWall));
	
	float3 push = spatialLayers.SL_Interact.Position.closest(Position, Size*1.5, 1);
	float3 link = spatialLayers.SL_Interact.Position.closest(Position, Size*2, 2);
	float3 PUSH = select(0,Position-push,isfinite(push))*8;
	float3 LINK = - select(0,Position-link,isfinite(link) && length(Position-link)>0.2)*2;


	vecTarget += safe_normalize(Target + InitialPos - Position)*dt*4;
	vecTarget = safe_normalize(vecTarget);
	float3 smallTurb = lerp(1,Turb_1.sample(Position*4),0.5);
	float3 pos = vecTarget * smallTurb * (1-0.5*saturate(length(realTarget*0.25)))*2* saturate(0.25*length(CRSTarget.samplePosition()-Position));
	float3 allMove = circling + charge + PUSH + LINK + pos + avoidWall.xyz*avoidWall.w*8;
	VelocityField = lerp(allMove*saturate(length(realTarget)),allMove,Agitation);
	
	Color = lerp(float4(0,0,1,1),float4(1,0.25,0.25,1),Mood*0.5+0.5)*InfosVisibility;
	ColorRadar = Color*0.2;
	
	Position = Position.x0z + OffsetYpos.0x0;
	
	Direction = safe_normalize(Position-prePos);
	
	throwDir = safe_normalize(ProtestTarget.samplePosition()-Position);
	
	gaz = select(0,1,Gaz_CRS==1 && gaz==0);
	Gaz.trigger(gaz == 1 && ID == floor((scene.Time*CRS_Count)%CRS_Count));
	gaz = select(1,0,Gaz_CRS==0);
	
	dog = select(0,1,Dog_CRS==1 && dog==0);
	Dog.trigger(dog == 1 && ID == floor((scene.Time*CRS_Count)%CRS_Count));
	dog = select(1,0,Dog_CRS==0);
	
	MeshId = ActivateVoxelCharacter;
}
";
}
CParticleEvolver_SpatialInsertion	$LOCAL$/CParticleEvolver_SpatialInsertion_78104860
{
	CustomName = "SpatialInsertion";
	SpatialLayer = "$LOCAL$/CParticleSpatialDescriptor_50098991";
}
CActionFactoryParticleSpawnerBase	$LOCAL$/CRS
{
	EditorInfosPosition = int2(-288, -61);
	Descriptor = "$LOCAL$/CParticleDescriptor_0FEC68D1";
	SpawnCountMode = TotalParticleCount;
	FluxFactorExpression = "CRS_Count";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_0B434054
{
	AttributeName = "Start_Angry_Protest";
	DefaultValueF4 = float4(5.0000000e-001, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_C353FBA7
{
	AttributeName = "Start_Angry_CRS";
	DefaultValueF4 = float4(2.5000000e-001, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleEvolver_SpatialInsertion	$LOCAL$/Evolver_2
{
	CustomName = "SpatialInsertion";
	SpatialLayer = "$LOCAL$/CParticleSpatialDescriptor_922EFBDD";
}
CParticleEvolver_SpatialInsertion	$LOCAL$/Evolver_3
{
	CustomName = "SpatialInsertion";
	SpatialLayer = "$LOCAL$/CParticleSpatialDescriptor_922EFBDD";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_6341DFF6
{
	FieldName = "AccuAngry";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_46205408
{
	AttributeName = "Recall_Deserter";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_FA4BFF6B
{
	AttributeName = "Speed_Weak_Mass";
	DefaultValueF4 = float4(3.9999999e-002, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_1AC88D0A
{
	AttributeName = "Charge_Protest";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_75EF577C
{
	FieldName = "TimeDesert";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_1BE0CDEF
{
	AttributeName = "Treshold_Mood_Action_Protest";
	DefaultValueF4 = float4(5.0000000e-001, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_DB327BDE
{
	AttributeName = "Speed_Grow_Mass";
	DefaultValueF4 = float4(2.0000000e-002, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_D410B8F9
{
	AttributeName = "Agitation";
	DefaultValueF4 = float4(1.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_D0CA7CD7
{
	AttributeName = "Circling_Protest";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_BA3CE0E6
{
	AttributeName = "Charge_CRS";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_6270FEA1
{
	AttributeName = "Circling_CRS";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_D9034178
{
	AttributeName = "Treshold_Mood_Action_CRS";
	DefaultValueF4 = float4(8.9999998e-001, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Gaz
{
	Descriptor = "$LOCAL$/CParticleDescriptor_D2F9C19B";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_D2F9C19B
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_2DA731EC";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_D8B5E045",
		"$LOCAL$/CParticleFieldDeclaration_AC6DC214",
		"$LOCAL$/CParticleFieldDeclaration_A56BC067",
	};
	CustomEvents = 
	{
		"$LOCAL$/CParticleEventDeclaration_54C37C70",
	};
	VirtualParentFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_5C84C5CD",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_42BB62FA";
	States = 
	{
		"$LOCAL$/CParticleState_E75F811F",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_42BB62FA
{
	Expression = "function void	Eval()
{
	throwDir = parent.throwDir;
	Life = 10;
	Size = 0.05;
	Velocity = (float3(0,1,0) + throwDir*2)*Gaz_PowerThrow;
	Color = float4(0,0,0,1);
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D8B5E045
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_2DA731EC
{
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/BallDiffuse.png";
}
CParticleState	$LOCAL$/CParticleState_E75F811F
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_D1E096CE",
		"$LOCAL$/Trail_1",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_D1E096CE
{
	CustomName = "Physics";
	ConstantAcceleration = float3(0.0000000e+000, -2.0000000e+000, 0.0000000e+000);
	Drag = 1.0000000e+000;
	WorldInteractionMode = OneWay;
	BouncesBeforeDeath = 10;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_F92A76A9
{
	AttributeName = "Gaz_CRS";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleEventDeclaration	$LOCAL$/CParticleEventDeclaration_89669620
{
	EventName = "Gaz";
	EventAction = "$LOCAL$/Gaz";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_9B47DF63
{
	FieldName = "gaz";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_EF197062
{
	FieldName = "throwDir";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5C84C5CD
{
	FieldName = "throwDir";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_AC6DC214
{
	FieldName = "throwDir";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_A56BC067
{
	FieldName = "Velocity";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5D5EA3B6
{
	FieldName = "ID";
	FieldType = int;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_341191B1
{
	AttributeName = "CRS_Count";
	AttributeType = int;
	DefaultValueF4 = float4(4.0000000e+002, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	DefaultValueI4 = int4(400, 0, 0, 0);
	HasMin = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_BBE6C9C8
{
	AttributeName = "Protest_Count";
	AttributeType = int;
	DefaultValueF4 = float4(4.0000000e+002, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	DefaultValueI4 = int4(400, 0, 0, 0);
	HasMin = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_2274C82B
{
	AttributeName = "Gaz_PowerThrow";
	DefaultValueF4 = float4(4.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Smoke
{
	Descriptor = "$LOCAL$/CParticleDescriptor_1008A4CA";
	DurationInSeconds = 1.0000000e+001;
	SpawnCount = 1.0000000e+001;
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_1008A4CA
{
	Renderer = "$LOCAL$/CParticleRenderer_Billboard_60415AAF";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_1F2D813C",
		"$LOCAL$/CParticleFieldDeclaration_1BE89BF3",
	};
	Samplers = 
	{
		"$LOCAL$/CParticleSamplerProceduralTurbulence_CB03A032",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_35185E55";
	States = 
	{
		"$LOCAL$/CParticleState_7563A79E",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_35185E55
{
	Expression = "function void	Eval()
{
	Life = 10;
	Size = 0.1;
	Velocity = float3(0,0.1,0) + vrand().x0z*0.5;
	Color = float4(1.0);
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_1F2D813C
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_60415AAF
{
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/BallDiffuse.png";
}
CParticleState	$LOCAL$/CParticleState_7563A79E
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_ACFF6FB9",
		"$LOCAL$/Script_2",
		"$LOCAL$/Evolver_4",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_ACFF6FB9
{
	CustomName = "Physics";
	Drag = 5.0000000e-001;
	VelocityFieldSampler = "Turb_2";
}
CParticleEventDeclaration	$LOCAL$/CParticleEventDeclaration_54C37C70
{
	EventName = "OnDeath";
	EventAction = "$LOCAL$/Smoke";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_1BE89BF3
{
	FieldName = "Velocity";
	FieldType = float3;
}
CParticleSamplerProceduralTurbulence	$LOCAL$/CParticleSamplerProceduralTurbulence_CB03A032
{
	SamplerName = "Turb_2";
	TimeScale = 5.0000000e-001;
}
CParticleEvolver_Script	$LOCAL$/Script_2
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_822FC9DD";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_822FC9DD
{
	Expression = "function void	Eval()
{
	Size = pow(LifeRatio,0.5);
	Color = float4(1,1,1,(1-pow(LifeRatio,4))*0.25);
}
";
}
CParticleSpatialDescriptor	$LOCAL$/CParticleSpatialDescriptor_D3040F64
{
	LayerName = "SL_Smoke";
}
CParticleEvolver_SpatialInsertion	$LOCAL$/Evolver_4
{
	CustomName = "SpatialInsertion";
	SpatialLayer = "$LOCAL$/CParticleSpatialDescriptor_D3040F64";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_D67E6FF7
{
	AttributeName = "Mask_Protest_Percent";
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleRenderer_Mesh	$LOCAL$/CParticleRenderer_Mesh_9DDFBD10
{
	CustomName = "Mesh";
	Meshes = 
	{
		"$LOCAL$/CParticleRenderer_Mesh_Descriptor_E50B6637",
		"$LOCAL$/CParticleRenderer_Mesh_Descriptor_99439913",
	};
	ForwardAxisField = "Direction";
	UpAxisField = "AxisUp";
}
CParticleRenderer_Mesh_Descriptor	$LOCAL$/CParticleRenderer_Mesh_Descriptor_99439913
{
	Mesh = "Meshes/CRS.fbx";
	CastShadow = true;
	Diffuse = "Meshes/CRS.png";
	CustomName = "Mesh_Descriptor";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_212635FD
{
	FieldName = "Size";
}
CParticleRenderer_Mesh_Descriptor	$LOCAL$/CParticleRenderer_Mesh_Descriptor_4A594AB8
{
	Mesh = "Meshes/PROT.fbx";
	CastShadow = true;
	Diffuse = "Meshes/PROT.png";
	CustomName = "Mesh_Descriptor";
}
CParticleRenderer_Mesh	$LOCAL$/CParticleRenderer_Mesh_4CD7E3DB
{
	CustomName = "Mesh";
	Meshes = 
	{
		"$LOCAL$/CParticleRenderer_Mesh_Descriptor_A8E89CA4",
		"$LOCAL$/CParticleRenderer_Mesh_Descriptor_4A594AB8",
	};
	ForwardAxisField = "Direction";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_3D1455F1
{
	FieldName = "Direction";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_1B42C308
{
	FieldName = "prePos";
	FieldType = float3;
}
CParticleEvolver_Script	$LOCAL$/Script_3
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_3D1EC40A";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_3D1EC40A
{
	Expression = "function void	Eval()
{
//// POSITION A LA FRAME PRECEDENTE

	prePos = Position;
}
";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_F860CBF9
{
	Expression = "function void	Eval()
{
	prePos = Position;
}
";
}
CParticleEvolver_Script	$LOCAL$/CParticleEvolver_Script_9815EDB0
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_F860CBF9";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_DFC74633
{
	FieldName = "prePos";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_7CD67772
{
	FieldName = "Direction";
	FieldType = float3;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_4AC3D21D
{
	AttributeName = "ActivateVoxelCharacter";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleRenderer_Mesh_Descriptor	$LOCAL$/CParticleRenderer_Mesh_Descriptor_A8E89CA4
{
	Material = Additive;
	CustomName = "Mesh_Descriptor";
}
CParticleRenderer_Mesh_Descriptor	$LOCAL$/CParticleRenderer_Mesh_Descriptor_E50B6637
{
	Material = Additive;
	CustomName = "Mesh_Descriptor";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_2B9155C6
{
	FieldName = "Mask";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_3AD22501
{
	AttributeName = "InfosVisibility";
	DefaultValueF4 = float4(1.0000000e+000, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_EC04F234
{
	SamplerName = "ProtestStartArea";
	Shape = "$LOCAL$/CShapeDescriptor_F5DCA307";
	SampleDimensionality = Volume;
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_F5DCA307
{
	Position = float3(-8.7432194e+000, 0.0000000e+000, 0.0000000e+000);
	BoxDimensions = float3(1.9083980e+000, 5.0000000e-001, 2.8873641e+000);
}
CNEdEditorParticle_BackdropToSamplerShape	$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_4E79EAD6
{
	SourceSamplerShape = "$LOCAL$/CParticleSamplerShape_EC04F234";
}
CShapeDescriptor	$LOCAL$/CShapeDescriptor_0C2EA1F5
{
	Position = float3(-1.2269525e+001, 2.3841858e-004, 1.0353528e+001);
	BoxDimensions = float3(1.9083980e+000, 5.0000000e-001, 2.8873641e+000);
}
CParticleSamplerShape	$LOCAL$/CParticleSamplerShape_0C393D5C
{
	SamplerName = "CRSStartArea";
	Shape = "$LOCAL$/CShapeDescriptor_0C2EA1F5";
	SampleDimensionality = Volume;
}
CNEdEditorParticle_BackdropToSamplerShape	$LOCAL$/CNEdEditorParticle_BackdropToSamplerShape_95BBB94F
{
	SourceSamplerShape = "$LOCAL$/CParticleSamplerShape_0C393D5C";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_8F481ABE
{
	AttributeName = "OffsetYpos";
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_FA555159
{
	AttributeName = "Protest_Regain_Mood_Speed";
	DefaultValueF4 = float4(9.9999998e-003, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_CF442893
{
	AttributeName = "CRS_Regain_Mood_Speed";
	DefaultValueF4 = float4(9.9999998e-003, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
CActionFactoryParticleSpawnerBase	$LOCAL$/Dog
{
	Descriptor = "$LOCAL$/CParticleDescriptor_B0A9D952";
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_B0A9D952
{
	Renderer = "$LOCAL$/CParticleRenderer_List_826599EB";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_7428D784",
		"$LOCAL$/CParticleFieldDeclaration_AA3CF98A",
		"$LOCAL$/CParticleFieldDeclaration_5444F215",
		"$LOCAL$/CParticleFieldDeclaration_6187BFFC",
		"$LOCAL$/CParticleFieldDeclaration_E39EC59D",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_CFE7E97D";
	States = 
	{
		"$LOCAL$/CParticleState_156661A6",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_CFE7E97D
{
	Expression = "function void	Eval()
{
	Life = Dog_Duration;
	Size = 0.2;
	SizeRadar = Size * 16;
	Color = float4(1,0,1,1);
	ColorRadar = Color*0.4;
	AxisUp = scene.axisUp();
	AxisSide = scene.axisSide();
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_7428D784
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleState	$LOCAL$/CParticleState_156661A6
{
	Evolvers = 
	{
		"$LOCAL$/CParticleEvolver_Physics_69E42E61",
		"$LOCAL$/Script_5",
		"$LOCAL$/Evolver_5",
	};
}
CParticleEvolver_Physics	$LOCAL$/CParticleEvolver_Physics_69E42E61
{
	CustomName = "Physics";
	Drag = 1.0000000e+000;
	WorldInteractionMode = OneWay;
	BouncesBeforeDeath = 0;
	BounceRestitution = 1.0000000e+000;
}
CParticleEvolver_Spawner	$LOCAL$/Trail_1
{
	CustomName = "Spawner";
	SpawnInterval = 5.0000001e-002;
	Descriptor = "$LOCAL$/CParticleDescriptor_3A44435B";
}
CParticleState	$LOCAL$/CParticleState_5B9A4C38
{
	Evolvers = 
	{
		"$LOCAL$/Script_4",
	};
}
CParticleDescriptor	$LOCAL$/CParticleDescriptor_3A44435B
{
	Renderer = "$LOCAL$/CParticleRenderer_List_418A8E69";
	CustomFields = 
	{
		"$LOCAL$/CParticleFieldDeclaration_7FF2A405",
		"$LOCAL$/CParticleFieldDeclaration_D6A60923",
	};
	SpawnEvaluator = "$LOCAL$/CCompilerSyntaxNodeExpression_557327BA";
	States = 
	{
		"$LOCAL$/CParticleState_5B9A4C38",
	};
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_557327BA
{
	Expression = "function void	Eval()
{
	Life = 1.0;
	Size = parent.Size;
	Color = float4(1.0);
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_7FF2A405
{
	FieldName = "Color";
	FieldType = float4;
}
CParticleRenderer_Ribbon	$LOCAL$/CParticleRenderer_Ribbon_B8A95F8E
{
	CustomName = "Ribbon";
	Diffuse = "Textures/Circle.png";
	TextureUField = "U";
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_418A8E69
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Ribbon_B8A95F8E",
	};
}
CParticleEvolver_Script	$LOCAL$/Script_4
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_7F78A8E0";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_7F78A8E0
{
	Expression = "function void	Eval()
{
	Color = float4(1,1,1,0.1*(1-LifeRatio));
	
	U = LifeRatio*2+0.5;
}
";
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_D6A60923
{
	FieldName = "U";
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_2019FD22
{
	AttributeName = "Dog_CRS";
	AttributeType = int;
	HasMin = true;
	HasMax = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(1, 10, 10, 10);
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_0FD5F18D
{
	FieldName = "dog";
}
CParticleEventDeclaration	$LOCAL$/CParticleEventDeclaration_04FC78D4
{
	EventName = "Dog";
	EventAction = "$LOCAL$/Dog";
}
CParticleEvolver_Script	$LOCAL$/Script_5
{
	CustomName = "Script";
	Expression = "$LOCAL$/CCompilerSyntaxNodeExpression_D4F15E27";
}
CCompilerSyntaxNodeExpression	$LOCAL$/CCompilerSyntaxNodeExpression_D4F15E27
{
	Expression = "function void	Eval()
{
	float3 posProtest = spatialLayers.SL_Protest.Position.closest(Position, SizeRadar*0.5);
	posProtest = select(0,posProtest,isfinite(posProtest));


	float4 avoidWall = scene.intersect(Position - OffsetYpos.0x0, rotate(safe_normalize(ProtestTarget.samplePosition() - Position),float3(0,1,0),rand(-pi,pi)*0.5), 1);
	avoidWall = select(0, avoidWall , isfinite(avoidWall));
	
	VelocityField = safe_normalize(posProtest-Position)*4*(1-saturate(length(ProtestTarget.samplePosition() - Position))) + safe_normalize(ProtestTarget.samplePosition() - Position)*2 + avoidWall.xyz*avoidWall.w*8;
	Position = Position.x0z;
}
";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_5036E488
{
	EditorInfosPosition = int2(-508, -63);
	CustomName = "Billboard";
	BillboardingMaterial = AlphaBlend;
	Diffuse = "Textures/BallDiffuse.png";
	BillboardMode = PlanarAlignedQuad;
	AxisField = "AxisSide";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CParticleRenderer_List	$LOCAL$/CParticleRenderer_List_826599EB
{
	CustomName = "List";
	Renderers = 
	{
		"$LOCAL$/CParticleRenderer_Billboard_5036E488",
		"$LOCAL$/CParticleRenderer_Billboard_8D76BCF2",
	};
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_AA3CF98A
{
	FieldName = "AxisUp";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_5444F215
{
	FieldName = "AxisSide";
	FieldType = float3;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_6187BFFC
{
	FieldName = "VelocityField";
	FieldType = float3;
}
CParticleEvolver_SpatialInsertion	$LOCAL$/Evolver_5
{
	CustomName = "SpatialInsertion";
	SpatialLayer = "$LOCAL$/CParticleSpatialDescriptor_30BE5779";
}
CParticleSpatialDescriptor	$LOCAL$/CParticleSpatialDescriptor_30BE5779
{
	LayerName = "SL_Dog";
}
CParticleRenderer_Billboard	$LOCAL$/CParticleRenderer_Billboard_8D76BCF2
{
	DrawOrder = -1;
	CustomName = "Billboard";
	Diffuse = "Textures/Circle.png";
	BillboardMode = PlanarAlignedQuad;
	SizeField = "SizeRadar";
	ColorField = "ColorRadar";
	AxisField = "AxisSide";
	Axis2Field = "AxisUp";
	AxisScale = 1.0000000e+000;
}
CParticleFieldDeclaration	$LOCAL$/CParticleFieldDeclaration_E39EC59D
{
	FieldName = "ColorRadar";
	FieldType = float4;
}
CParticleAttributeDeclaration	$LOCAL$/CParticleAttributeDeclaration_DB4F5DB7
{
	AttributeName = "Dog_Duration";
	DefaultValueF4 = float4(2.0000000e+001, 0.0000000e+000, 0.0000000e+000, 0.0000000e+000);
	HasMin = true;
	MaxValueF4 = float4(1.0000000e+000, 1.0000000e+000, 1.0000000e+000, 1.0000000e+000);
	MaxValueI4 = int4(10, 10, 10, 10);
}
